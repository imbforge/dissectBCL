import os

# Define flowcell class, which will contain all information
class flowCell:
    """This is a flowCell class, which contains both the prior 
    information we have as well as the information generated by demultiplexing,
    and postMux QC's (FastQC, multiQC, contamination screens). we have 'inVars', which are independent
    """

    # fileChecks
    def filesExist(self):
        """
        takes a list of files and returns a tuple (Bool, Dict) with:
        Bool = True (all files in files exist)
        Bool = False (at least 1 file doesn't exist)
        Dict = Dict with bool status of each file.
        """
        checkFiles = [
            self.inVars['bclPath'],
            self.inVars['origSS'],
            self.inVars['runInfo'],
            self.inVars['inBaseDir'],
            self.inVars['outBaseDir']
        ]
        existDic = {}
        existStatus = True
        for f in checkFiles:
            if not os.path.exists(f):
                existDic[f] = False
                existStatus = False
            else:
                existDic[f] = True
        return (existStatus, existDic)


    def __init__(self, name, bclPath, origSS, runInfo, inBaseDir, outBaseDir):
        sequencers = {
            'A': 'NovaSeq',
            'N': 'NextSeq',
            'M': 'MiSeq'
        }
        self.inVars = {
            'name': name,
            'sequencer': sequencers[name.split('_')[1][0]],
            'bclPath': bclPath,
            'origSS': origSS,
            'runInfo': runInfo,
            'inBaseDir': inBaseDir,
            'outBaseDir': outBaseDir
        }
        self.inferredVars = {}